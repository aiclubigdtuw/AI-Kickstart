# -*- coding: utf-8 -*-
"""SamyaJain.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FexFPrdjMJNDUlp71oix2VxlxYt-KQbK?usp=sharing

##Analyzing Instagram fake spammer genuine accounts
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

train = pd.read_csv("train.csv")

train.shape #The answer is in the form of tuple because tuples are immutable and we don't want that someone else
            #change the shape of the data.

train.head()  #First 5 rows
              #train.tail() Last 5 rows

train.describe()



"""####Q1 Determine the maximum no. of followers possessed by a user belonging to the group of users with no profile picture."""

#Analyzing how many are having profile pic or not
sns.countplot("profile pic", data=train)

#using max function to find out the max followers of the person having no profile pic
train[train["profile pic"]==0]['#followers'].max()



"""####Q2. Dead accounts are characterized by a lack of substantial activity on the platform, primarily concerning the accounts with no profile picture, empty bio and 0 posts. Determine the number of dead accounts, if they exist."""

DeadAccounts=train[ (train['profile pic']==0) & (train['#posts']==0)  & (train['description length']==0)]

DeadAccounts.describe()

DeadAccounts.count()



"""####Q3. Find out how expressive a person is on Instagram based on the length of their bio. (Hint: An expressive person can be defined as the user whose description_length exceeds the average.)"""

sns.countplot("description length", data=train) 
sns.displot(train["description length"])

train['description length'].describe()

train['expressiveornot']=0
for i in range(0,576):
  if (train['description length'][i]>train['description length'].mean()):
    train['expressiveornot'][i]='yes'
  else:
    train['expressiveornot'][i]='no'

train.head()

sns.countplot('expressiveornot', data=train)

train['expressiveornot'].value_counts()



"""####Q4. Determine the maximum no. of followers possessed by a user among those who have 0 posts on their respective accounts."""

sns.countplot("#posts", data=train) 
sns.displot(train["#posts"],bins=30)

train[train["#posts"]==0]['#followers'].max()



"""####Q5. Fake accounts have been witnessed to heavily skew the follower and following numbers.What is the ratio of number of followers (#followers) to number of following     (#follows) for the user with the maximum number of following?"""

sns.displot(train["fake"])

sns.countplot(train["#follows"])

sns.countplot(train["#followers"])

followers=0
follows=0
for i in range(len(train[['#followers', '#follows', 'fake']])):
  if((train[['#followers', '#follows', 'fake']]['#followers'][i]-train[['#followers', '#follows', 'fake']]['fake'][i])>followers):
    followers=train[['#followers', '#follows', 'fake']]['#followers'][i]-train[['#followers', '#follows', 'fake']]['fake'][i]
    follows=train[['#followers', '#follows', 'fake']]['#follows'][i]

print(followers)
print(follows)
ratio=followers/follows
print(ratio)

